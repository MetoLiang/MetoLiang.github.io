{"meta":{"title":"MetoLiang","subtitle":"","description":"分享个人生活与气象、海洋知识","author":"Liang Jin","url":"http://MetoLiang.github.io","root":"/"},"pages":[{"title":"","date":"2022-10-17T12:20:50.981Z","updated":"2022-10-17T12:20:50.981Z","comments":true,"path":"about/index.html","permalink":"http://metoliang.github.io/about/index.html","excerpt":"","text":"关于我 硕士研究生在读 中国气象学会会员 中国能源研究会碳中和专委会会员 我的社交账户 微博：哎Liang Github:MetoLiang CSDN:meteorology_liang Researchgate:Liang Jin 我的邮箱： &#99;&#x75;&#x61;&#106;&#105;&#110;&#108;&#105;&#x61;&#110;&#x67;&#x40;&#49;&#x36;&#51;&#x2e;&#99;&#x6f;&#109; &#108;&#105;&#x61;&#x6e;&#x67;&#95;&#103;&#100;&#x6f;&#117;&#x40;&#102;&#111;&#120;&#109;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#109; 友情链接：同学的CSDN"},{"title":"photos","date":"2022-10-17T12:26:10.000Z","updated":"2022-10-17T12:26:10.816Z","comments":true,"path":"photos/index.html","permalink":"http://metoliang.github.io/photos/index.html","excerpt":"","text":""}],"posts":[{"title":"python画指定单个台风路径","slug":"TC","date":"2022-03-16T02:29:39.000Z","updated":"2022-03-16T10:50:34.521Z","comments":true,"path":"2022/03/16/TC/","link":"","permalink":"http://metoliang.github.io/2022/03/16/TC/","excerpt":"","text":"热带气旋（Tropical cyclone，简称TC）是最具破坏性的自然灾害之一。TC引起的大浪，对船只和海上作业造成威胁。强大的风力足以损坏甚至摧毁沿海的建筑、桥梁、车辆等。高达几米的风暴潮，引起潮水漫溢，海堤溃决，海水倒灌，侵蚀海岸，淹没城镇和农田，盐渍土地。TC携带的滂沱大雨，不但给登陆地带带来直接洪涝灾害，还引发次生灾害，如山体滑坡和泥石流等。在一些大中城市，TC造成的暴雨和海水倒灌很可能造成城市内涝，引发交通瘫痪、地铁停运、破坏生态、疫病流行等，影响城市正常运行。这些都会造成大量人员伤亡和财产损失。热带气旋也是影响我国的主要灾害性天气系统，造成的损失占全国所有灾害损失的一半。在大气和海洋研究中经常会画台风的路径，比如要研究一个超强台风的个例，那我们怎么用python实现画指定单个台风的路径呢？下面是我按个人理解编写的代码，如有错误的地方，欢迎指出。我选用的台风路径数据来源于国际气候管理最佳路径档案（International Best Track Archive for Climate Stewardship，IBTrACS），是目前最完整的热带气旋数据集。它合并了多个机构最近和历史的热带气旋数据，创建了一个统一的、公开可用的、最佳路径的数据集，从而提高了机构间的比较。其下载地址，点这。 &emsp;可以看到它有分各个大洋的数据和总体的数据，这里我选的是ALL。下载后，打开数据，我们看到有多个机构的数据，如美国的、日本的、中国气象局的（CMA）还有中国香港等。我用的是CMA的数据。CMA记录的有纬度（cma_lat）、经度（cma_lon）、强度类别（cma_cat）、最大风速（cma_wind）、中心气压（cma_pres）。 &emsp;那么我们怎么找出我们想要的台风呢？这里要注意的是CMA的数据是有两个维度的，分别是storm和date_time。而storm是长这样的，是从0-13582的数，也就是一个台风对应这其中的一个值，那我们如果想找一个特定的台风用这个的话就非常不方便。注意到，数据中还有这么一个变量（name）,我们看看它长啥样。可以看到它是由气旋名字组成的数组，同样是13583个值，那我们就可以根据这个气旋名字来找出想要的台风。 &emsp;例如对于台风山竹（国际编号：1822）,用下面代码找出所有索引，为啥是所有的索引呢，这是因为可能有些台风名字用过好几次，所以我们先全部找出来。 12345678910name = np.ndarray.tolist(np.array(ds.name)) #将DataArray转为ndarray再转化为list#下面找出所有符合的索引TC_name = b&#x27;MANGKHUT&#x27; #在这里输入你想要的台风名称，大写index = []current_pos = 0for _ in range(name.count(TC_name)): new_list = name[current_pos:] _index = new_list.index(TC_name) index.append(current_pos + _index) current_pos += new_list.index(TC_name)+1 &emsp;可以看到索引值为12659和13200，接下来我们可以用时间来判断哪个是你想要的台风。山竹是18年的台风，所以13200是它的索引。 &emsp;下面是完整代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899import xarray as xrimport numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport matplotlib.lines as mlinesimport cartopy.crs as ccrsimport cartopy.feature as cfeaturefrom cartopy.mpl.ticker import LongitudeFormatter,LatitudeFormatterimport shapely.geometry as sgeomimport warningswarnings.filterwarnings(&#x27;ignore&#x27;)plt.rcParams[&#x27;font.sans-serif&#x27;] = [u&#x27;SimHei&#x27;]plt.rcParams[&#x27;axes.unicode_minus&#x27;] = Falsepath=r&#x27;D:\\nc\\IBTrACS.nc&#x27;ds=xr.open_dataset(path)name = np.ndarray.tolist(np.array(ds.name)) #将DataArray转为ndarray再转化为list#下面找出所有符合的索引TC_name = b&#x27;MANGKHUT&#x27; #在这里输入你想要的台风名称index = []current_pos = 0for _ in range(name.count(TC_name)): new_list = name[current_pos:] _index = new_list.index(TC_name) index.append(current_pos + _index) current_pos += new_list.index(TC_name)+1lat = ds.cma_lat[13200,:]lon = ds.cma_lon[13200,:]cat = ds.cma_cat[13200,:]time = np.array(ds.time[13200,:])#拼接原始数据，并存为dataframelenth_ori = time.shape[0]df_time_ori = pd.DataFrame(time,index=None,columns =[&#x27;time&#x27;])df_lat_ori = pd.DataFrame(lat,index=None,columns =[&#x27;lat&#x27;])df_lon_ori = pd.DataFrame(lon,index=None,columns =[&#x27;lon&#x27;])df_cat_ori = pd.DataFrame(cat,index=None,columns =[&#x27;cat&#x27;])df_data_ori = pd.concat([df_time_ori,df_lat_ori,df_lon_ori,df_cat_ori],axis=1)#删除有nan的行，并更新indexTC_data = df_data_ori.dropna(axis=0, how=&#x27;any&#x27;, thresh=None, subset=None, inplace=False).reset_index()# 按强度区分颜色def get_color(cat): if cat in (0,1): color=&#x27;#FFFF00&#x27; elif cat in (1,2): color=&#x27;#6495ED&#x27; elif cat in (2,3): color=&#x27;#3CB371&#x27; elif cat in (3,4): color=&#x27;#FFA500&#x27; elif cat in (4,5): color=&#x27;#FF00FF&#x27; elif cat in (5,6): color=&#x27;#DC143C&#x27; return color# 通过cartopy获取底图fig = plt.figure(figsize=(10,10))ax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())# 用经纬度对地图区域进行截取，这里只展示我国沿海区域ax.set_extent([85,170,0,50], crs=ccrs.PlateCarree())# 设置名称ax.set_title(&#x27;1522号台风彩虹&#x27;,fontsize=16)# 设置地图属性，比如加载河流、海洋ax.add_feature(cfeature.LAND)ax.add_feature(cfeature.OCEAN)ax.add_feature(cfeature.COASTLINE)ax.add_feature(cfeature.RIVERS)ax.add_feature(cfeature.COASTLINE)ax.add_feature(cfeature.LAKES, alpha=0.5)for i in range(len(TC_data)): ax.scatter(list(TC_data[&#x27;lon&#x27;])[i], list(TC_data[&#x27;lat&#x27;])[i], marker=&#x27;o&#x27;, s=20, color=get_color(list(TC_data[&#x27;cat&#x27;])[i]))for i in range(len(TC_data)-1): pointA = list(TC_data[&#x27;lon&#x27;])[i],list(TC_data[&#x27;lat&#x27;])[i] pointB = list(TC_data[&#x27;lon&#x27;])[i+1],list(TC_data[&#x27;lat&#x27;])[i+1] ax.add_geometries([sgeom.LineString([pointA, pointB])], color=get_color(list(TC_data[&#x27;cat&#x27;])[i+1]),crs=ccrs.PlateCarree())ax.set_xticks(np.arange(80,170,10), crs=ccrs.PlateCarree())ax.set_yticks(np.arange(10,50,10), crs=ccrs.PlateCarree())ax.xaxis.set_major_formatter(LongitudeFormatter())ax.xaxis.set_minor_locator(plt.MultipleLocator(5))ax.yaxis.set_major_formatter(LatitudeFormatter())ax.yaxis.set_minor_locator(plt.MultipleLocator(5))a = mlines.Line2D([],[],color=&#x27;#FFFF00&#x27;,marker=&#x27;o&#x27;,markersize=7, label=&#x27;TD&#x27;,ls=&#x27;&#x27;)b = mlines.Line2D([],[],color=&#x27;#6495ED&#x27;, marker=&#x27;o&#x27;,markersize=7, label=&#x27;TS&#x27;,ls=&#x27;&#x27;)c = mlines.Line2D([],[],color=&#x27;#3CB371&#x27;, marker=&#x27;o&#x27;,markersize=7, label=&#x27;STS&#x27;,ls=&#x27;&#x27;)d = mlines.Line2D([],[],color=&#x27;#FFA500&#x27;, marker=&#x27;o&#x27;,markersize=7, label=&#x27;TY&#x27;,ls=&#x27;&#x27;)e = mlines.Line2D([],[],color=&#x27;#FF00FF&#x27;, marker=&#x27;o&#x27;,markersize=7, label=&#x27;STY&#x27;,ls=&#x27;&#x27;)f = mlines.Line2D([],[],color=&#x27;#DC143C&#x27;, marker=&#x27;o&#x27;,markersize=7, label=&#x27;SSTY&#x27;,ls=&#x27;&#x27;)ax.legend(handles=[a,b,c,d,e,f], numpoints=1, handletextpad=0, loc=&#x27;upper left&#x27;, shadow=True)# 展示地图fig.tight_layout()plt.savefig(r&#x27;D:\\picture\\TC\\1522_caihong.jpg&#x27;)plt.show() &emsp;效果图如下：","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://metoliang.github.io/tags/Python/"},{"name":"台风","slug":"台风","permalink":"http://metoliang.github.io/tags/%E5%8F%B0%E9%A3%8E/"}]},{"title":"Windows系统下Anaconda安装指南","slug":"anaconda","date":"2022-03-14T08:24:17.000Z","updated":"2022-03-16T02:51:29.627Z","comments":true,"path":"2022/03/14/anaconda/","link":"","permalink":"http://metoliang.github.io/2022/03/14/anaconda/","excerpt":"","text":"一、下载Anaconda进入Anaconda官网，点击Download。默认是64Bit的，如果需要32Bit的。点Products&gt;Individual Edition，页面拉到最下面即可。 找到下载好的安装包，双击进行安装。 二、安装Anaconda很简单，一路Next就行。选择安装路径的话按个人习惯，可以放在C盘，也可以放在其它盘。安装结束后，点击计算机“开始”界面，可以看到有以下几个图标。 打开Anaconda prompt，输入：`conda list`，往下拉可以看到已经装了哪些库。 我们优先需要的是下面这几个，看看这几个库，哪些库已经自动安装好了，哪些还没有，没有的需要手动安装： **xarray**：读取nc数据用的。建议用这个，这个库比netCDF4库(读取nc数据)方便。这个库不仅读取nc数据，还能继续计算气候态、距平等等 **numpy**：数组计算用的 **pandas**：也是计算用的 **scipy**：计算相关系数、回归等等统计学函数用的 **matplotlib**：画线图、点图等等 **cartopy**：画空间分布图、二维图 **GSW**:海水热力学方程2010 (TEOS-10)的Python实现 三、安装需要的库1）以xarray为例：array官方网站 将上图官网中，这句代码复制到Anaconda prompt里，然后回车。 `conda install -c conda-forge xarray dask netCDF4 bottleneck` 按照提示操作，比如当弹出y/n（即：yes/no），输入y，即可继续自动安装xarray 有时候网络不好会安装失败，过一个时间再试。 **2）对于研究海洋的人一般会用到GSW库：** 其库的文档链接，[点这](https://teos-10.github.io/GSW-Python/intro.html)。安装为`conda install -c conda-forge gsw` 其他库的安装：先按照步骤“三、查看已经自动装了哪些库”，找找有没有xarray 、numpy 、pandas、scipy、matplotlib、cartopy这几个库，已经有了的不需要重复装，没有的需要在Anaconda prompt输入指令进行安装。一般直接conda install xxx就可以，xxx为你需要的库。如果提示找不到这个库可以试试conda install -c conda-forge xxx 四、进入编译器写代码单击Anaconda Prompt选择你所想要工作的硬盘，如我要在D盘工作，在命令窗口键入如下命令 123d: #选择D盘cd d: #进入D盘jupyter notebook #打开jupyter notebook 新手建议用jupyter notebook，因为可以一边写一边输出看看你写的结果。除此之外，我们打开Anaconda Navigator，可以看到里面已经有很多预装的编译器，比如jupyter lab（和jupyter notebook基本一样，但功能更强些），Spyder（也是Python编译器，界面美观），也可以安装例如PyCharm等，甚至还可以安装R语言和Orange（强大的绘图软件）。 五、可能遇到的问题及解决办法步骤“安装anaconda”完了之后，点开始目录-运行-或win+r打开cmd-输入conda info 若显示出以下界面为成功： 若显示“conda不是内部命令”，是因为没有设置环境变量。解决方法： 右击“我的电脑”-高级系统设置-高级-环境变量-系统变量-path-编辑，把一些路径输进去，保存、重启。 要加进去的路径有（每个人的Anaconda安装路径不同，按照各自的找出来）：","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://metoliang.github.io/tags/Python/"},{"name":"Anaconda","slug":"Anaconda","permalink":"http://metoliang.github.io/tags/Anaconda/"}]},{"title":"我的第一篇博客","slug":"hello-world","date":"2022-03-12T13:29:11.933Z","updated":"2022-03-14T10:31:00.213Z","comments":true,"path":"2022/03/12/hello-world/","link":"","permalink":"http://metoliang.github.io/2022/03/12/hello-world/","excerpt":"","text":"欢迎来到MetoLiang的博客!这是第一篇博客，本网站所有者是某高校在读研一学生，感兴趣的领域是大气和海洋。大家可以在researchgate上查看我的科研动态researchgate链接，也可以访问我的github主页github主页。我计划在这里分享科研道路上的个人生活和大气海洋的编程。","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://metoliang.github.io/tags/Python/"},{"name":"台风","slug":"台风","permalink":"http://metoliang.github.io/tags/%E5%8F%B0%E9%A3%8E/"},{"name":"Anaconda","slug":"Anaconda","permalink":"http://metoliang.github.io/tags/Anaconda/"}]}